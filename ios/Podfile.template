# Podfile template for PolyglotKey iOS
# This will be used when expo prebuild generates the iOS project

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

platform :ios, '16.0'
install! 'cocoapods', :deterministic_uuids => false

target 'PolyglotKey' do
  use_expo_modules!
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => false,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Keyboard Extension target
  target 'PolyglotKeyboard' do
    inherit! :complete
  end

  target 'PolyglotKeyTests' do
    inherit! :complete
  end

  # Post-install fixes
  post_install do |installer|
    # React Native post-install
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    # Fix ExpoModulesCore & React Native _Nonnull pointer errors
    installer.pods_project.targets.each do |target|
      if target.name.include?('ExpoModulesCore') || target.name.include?('React')
        target.build_configurations.each do |config|
          # Disable strict nullability checking to avoid warnings-as-errors
          config.build_settings['CLANG_ANALYZER_NONNULL'] = 'NO'
          config.build_settings['CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION'] = 'NO'
        end
        
        # Patch multiple header files for _Nonnull annotations
        ['EXJSIInstaller.h', 'EXNativeModulesProxy.h'].each do |header_name|
          header_files = target.source_build_phase.files.select do |file|
            file.file_ref.path.include?(header_name)
          end
          
          header_files.each do |file|
            header_path = file.file_ref.real_path.to_s
            if File.exist?(header_path)
              content = File.read(header_path)
              updated_content = content.dup
              
              # Multiple _Nonnull patches
              updated_content.gsub!(
                /releaser:\(void\(\^\)\(long\)\)/,
                'releaser:(void (^ _Nonnull)(long))'
              )
              updated_content.gsub!(
                /initWithConstants:\(NSDictionary \*\)/,
                'initWithConstants:(nonnull NSDictionary *)'
              )
              updated_content.gsub!(
                /\(instancetype\)init/,
                '(nonnull instancetype)init'
              )
              
              File.write(header_path, updated_content) if content != updated_content
            end
          end
        end
      end
    end

    # Fix "Run-Script build phase runs every build" warnings
    installer.pods_project.targets.each do |target|
      target.build_phases.each do |build_phase|
        if build_phase.class == Xcodeproj::Project::Object::PBXShellScriptBuildPhase
          # Add output file specification to reduce unnecessary rebuilds
          if build_phase.name&.include?('Expo') || build_phase.name&.include?('[Expo]')
            build_phase.output_paths ||= []
            build_phase.output_paths << '$(DERIVED_SOURCES_DIR)/expo_config_$(CONFIGURATION)'
          end
          
          if build_phase.name&.include?('Hermes')
            build_phase.output_paths ||= []
            build_phase.output_paths << '$(DERIVED_SOURCES_DIR)/hermes_done_$(CONFIGURATION)'
          end
        end
      end
    end

    # iOS 16+ deployment target enforcement + Build settings
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
        # Disable warnings-as-errors for compatibility
        config.build_settings['SWIFT_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
        config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        # Fix gesture handler issues
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        # Enable dependency analysis for build phases
        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
      end
    end
    
    # Fix build phases dependency analysis
    installer.pods_project.build_phases.each do |phase|
      if phase.respond_to?(:shell_script) && phase.shell_script
        phase.dependency_file = phase.dependency_file || "$(DERIVED_SOURCES_DIR)/BuildPhaseInput.d"
      end
    end
  end
end 